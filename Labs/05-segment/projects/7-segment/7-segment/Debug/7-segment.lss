
7-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dfc  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000594  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000422  00000000  00000000  00002726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9e:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);    
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	8a e2       	ldi	r24, 0x2A	; 42
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	8a e2       	ldi	r24, 0x2A	; 42
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	84 e2       	ldi	r24, 0x24	; 36
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 10e:	08 95       	ret

00000110 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ec 5f       	subi	r30, 0xFC	; 252
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 120:	e6 2f       	mov	r30, r22
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 50       	subi	r30, 0x00	; 0
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	d0 81       	ld	r29, Z
       
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 134:	67 e0       	ldi	r22, 0x07	; 7
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <SEG_update_shift_regs+0x3a>
 14e:	00 00       	nop
 150:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 1) == 1)
 152:	10 ff       	sbrs	r17, 0
 154:	06 c0       	rjmp	.+12     	; 0x162 <SEG_update_shift_regs+0x52>
        {
            GPIO_write_high(&PORTB, SEG_DATA);    
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 160:	05 c0       	rjmp	.+10     	; 0x16c <SEG_update_shift_regs+0x5c>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <SEG_update_shift_regs+0x5e>
 172:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 174:	67 e0       	ldi	r22, 0x07	; 7
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <SEG_update_shift_regs+0x70>
 184:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	8b e2       	ldi	r24, 0x2B	; 43
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        // Shift "segments"
        segments = segments >> 1;
 190:	16 95       	lsr	r17
 192:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
    _delay_us(1);
    
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 194:	f1 f6       	brne	.-68     	; 0x152 <SEG_update_shift_regs+0x42>
 196:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 1) == 1)
 198:	d0 ff       	sbrs	r29, 0
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <SEG_update_shift_regs+0x98>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <SEG_update_shift_regs+0xa2>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	85 e2       	ldi	r24, 0x25	; 37
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <SEG_update_shift_regs+0xa4>
 1b8:	00 00       	nop

        // Wait 1 us
        _delay_us(1);

        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 1ba:	67 e0       	ldi	r22, 0x07	; 7
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SEG_update_shift_regs+0xb6>
 1ca:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);

        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        // Shift "position"
        position = position >> 1;
 1d6:	d6 95       	lsr	r29
 1d8:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1da:	f1 f6       	brne	.-68     	; 0x198 <SEG_update_shift_regs+0x88>
        position = position >> 1;
        
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	8b e2       	ldi	r24, 0x2B	; 43
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SEG_update_shift_regs+0xd8>
 1ec:	00 00       	nop
    
    // Wait 1 us
    _delay_us(1);

}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
 1f6:	0e 94 78 00 	call	0xf0	; 0xf0 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3,0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 88 00 	call	0x110	; 0x110 <SEG_update_shift_regs>
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 202:	e1 e8       	ldi	r30, 0x81	; 129
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8b 7f       	andi	r24, 0xFB	; 251
 20a:	80 83       	st	Z, r24
 20c:	80 81       	ld	r24, Z
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 212:	ef e6       	ldi	r30, 0x6F	; 111
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	80 83       	st	Z, r24
    
    TIM0_overflow_4ms();
 21c:	85 b5       	in	r24, 0x25	; 37
 21e:	8c 7f       	andi	r24, 0xFC	; 252
 220:	85 bd       	out	0x25, r24	; 37
 222:	85 b5       	in	r24, 0x25	; 37
 224:	84 60       	ori	r24, 0x04	; 4
 226:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 228:	ee e6       	ldi	r30, 0x6E	; 110
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    
    sei();
 232:	78 94       	sei
 234:	ff cf       	rjmp	.-2      	; 0x234 <main+0x3e>

00000236 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
    if(citac <= 59)
 246:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <citac>
 24a:	8c 33       	cpi	r24, 0x3C	; 60
 24c:	08 f5       	brcc	.+66     	; 0x290 <__vector_13+0x5a>
    {
    citac++;    
 24e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <citac>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <citac>
    digit0 = citac / 10;
 258:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <citac>
 25c:	8d ec       	ldi	r24, 0xCD	; 205
 25e:	98 9f       	mul	r25, r24
 260:	91 2d       	mov	r25, r1
 262:	11 24       	eor	r1, r1
 264:	96 95       	lsr	r25
 266:	96 95       	lsr	r25
 268:	96 95       	lsr	r25
 26a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit0>
    digit1 = citac % 10;
 26e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <citac>
 272:	28 9f       	mul	r18, r24
 274:	81 2d       	mov	r24, r1
 276:	11 24       	eor	r1, r1
 278:	86 95       	lsr	r24
 27a:	86 95       	lsr	r24
 27c:	86 95       	lsr	r24
 27e:	88 0f       	add	r24, r24
 280:	98 2f       	mov	r25, r24
 282:	99 0f       	add	r25, r25
 284:	99 0f       	add	r25, r25
 286:	89 0f       	add	r24, r25
 288:	28 1b       	sub	r18, r24
 28a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <digit1>
 28e:	02 c0       	rjmp	.+4      	; 0x294 <__vector_13+0x5e>
    }
    
    else
    {
    citac = 0;
 290:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <citac>
    }
}
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
    static uint8_t pos = 0;
        if (pos == 0)
 2c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2ca:	81 11       	cpse	r24, r1
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <__vector_16+0x40>
        {
            SEG_update_shift_regs(digit0, 1);
 2ce:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <digit0>
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	0e 94 88 00 	call	0x110	; 0x110 <SEG_update_shift_regs>
            pos++;
 2d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__vector_16+0x4e>
        }
        else
        { 
            SEG_update_shift_regs(digit1, 0);
 2e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <digit1>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	0e 94 88 00 	call	0x110	; 0x110 <SEG_update_shift_regs>
            pos = 0;      
 2ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
        }
       
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
