
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800122  00800122  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000faa  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090d  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062b  00000000  00000000  00001de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000600  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040b  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_18>
  4c:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3c       	cpi	r26, 0xC5	; 197
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 94 00 	call	0x128	; 0x128 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 33 01 	call	0x266	; 0x266 <uart_init>
    
    //TIM0_overflow_4ms();
    //TIM0_overflow_interrupt_enable();
    
    // Enables interrupts by setting the global interrupt mask
    sei();
  b2:	78 94       	sei
    
    dig_H1 = (unsigned char)comp_data[24];                                         //A1
    }
    */
    
    result = twi_start((0x76<<1) + TWI_WRITE);
  b4:	8c ee       	ldi	r24, 0xEC	; 236
  b6:	0e 94 a3 00 	call	0x146	; 0x146 <twi_start>
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  be:	4a e0       	ldi	r20, 0x0A	; 10
  c0:	6b e6       	ldi	r22, 0x6B	; 107
  c2:	71 e0       	ldi	r23, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
    
    //Result
    itoa(result, uart_string, 10);
    uart_puts("data readout2 result:");
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
    uart_puts(uart_string);
  d2:	8b e6       	ldi	r24, 0x6B	; 107
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
    uart_puts("\r\n");
  da:	87 e1       	ldi	r24, 0x17	; 23
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
    
    if (!result)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	81 11       	cpse	r24, r1
  e8:	1e c0       	rjmp	.+60     	; 0x126 <main+0x80>
    {   
        uint8_t comp_data[7];
        twi_write(0xA1);
  ea:	81 ea       	ldi	r24, 0xA1	; 161
  ec:	0e 94 c1 00 	call	0x182	; 0x182 <twi_write>
        twi_start((0x76<<1) + TWI_READ);
  f0:	8d ee       	ldi	r24, 0xED	; 237
  f2:	0e 94 a3 00 	call	0x146	; 0x146 <twi_start>
      
            comp_data[0] = twi_read_ack();
  f6:	0e 94 cc 00 	call	0x198	; 0x198 <twi_read_ack>
  fa:	c8 2f       	mov	r28, r24
            //comp_data[3] = twi_read_ack();
            //comp_data[4] = twi_read_ack();
            //comp_data[5] = twi_read_ack();
            //comp_data[6] = twi_read_nack();
            
        twi_stop();
  fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <twi_stop>
 100:	40 e1       	ldi	r20, 0x10	; 16
 102:	6b e6       	ldi	r22, 0x6B	; 107
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	8c 2f       	mov	r24, r28
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
    //dig_H4 = ((short)comp_data[5] << 4);
    //dig_H5 = ((short)comp_data[4] >> 4) | ((short)comp_data[5] << 4);           //E6,E5  data4 = E5, data5 = E6
    //dig_H6 = comp_data[6];     //E7     data6 = E7
    
    itoa(comp_data[0], uart_string, 16);
    uart_puts("data2 ");
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
    uart_puts(uart_string);
 116:	8b e6       	ldi	r24, 0x6B	; 107
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
    uart_puts("\r\n");       
 11e:	87 e1       	ldi	r24, 0x17	; 23
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart_puts>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x80>

00000128 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	8f 7c       	andi	r24, 0xCF	; 207
 12c:	87 b9       	out	0x07, r24	; 7
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	80 63       	ori	r24, 0x30	; 48
 132:	88 b9       	out	0x08, r24	; 8
 134:	e9 eb       	ldi	r30, 0xB9	; 185
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	80 83       	st	Z, r24
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 144:	08 95       	ret

00000146 <twi_start>:
 146:	94 ea       	ldi	r25, 0xA4	; 164
 148:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	99 23       	and	r25, r25
 154:	ec f7       	brge	.-6      	; 0x150 <twi_start+0xa>
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <twi_start+0x1e>
 16a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 16e:	98 7f       	andi	r25, 0xF8	; 248
 170:	98 31       	cpi	r25, 0x18	; 24
 172:	29 f0       	breq	.+10     	; 0x17e <twi_start+0x38>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 34       	cpi	r25, 0x40	; 64
 178:	19 f4       	brne	.+6      	; 0x180 <twi_start+0x3a>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret

00000182 <twi_write>:
 182:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <twi_write+0xe>
 196:	08 95       	ret

00000198 <twi_read_ack>:
 198:	84 ec       	ldi	r24, 0xC4	; 196
 19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	ec f7       	brge	.-6      	; 0x1a2 <twi_read_ack+0xa>
 1a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1ac:	08 95       	ret

000001ae <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1ae:	84 e9       	ldi	r24, 0x94	; 148
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b4:	08 95       	ret

000001b6 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
 1ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 1ce:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1d2:	8c 71       	andi	r24, 0x1C	; 28
 1d4:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_RxHead>
 1d8:	ef 5f       	subi	r30, 0xFF	; 255
 1da:	ef 71       	andi	r30, 0x1F	; 31
 1dc:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 1e0:	e9 17       	cp	r30, r25
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <__vector_18+0x3c>
 1e4:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_RxHead>
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e9 5d       	subi	r30, 0xD9	; 217
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	20 83       	st	Z, r18
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <__vector_18+0x3e>
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 1f8:	89 2b       	or	r24, r25
 1fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_19>:
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_TxHead>
 228:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_TxTail>
 22c:	98 17       	cp	r25, r24
 22e:	69 f0       	breq	.+26     	; 0x24a <__vector_19+0x38>
 230:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <UART_TxTail>
 234:	ef 5f       	subi	r30, 0xFF	; 255
 236:	ef 71       	andi	r30, 0x1F	; 31
 238:	e0 93 25 01 	sts	0x0125, r30	; 0x800125 <UART_TxTail>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e9 5b       	subi	r30, 0xB9	; 185
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 81       	ld	r24, Z
 244:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 248:	05 c0       	rjmp	.+10     	; 0x254 <__vector_19+0x42>
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8f 7d       	andi	r24, 0xDF	; 223
 252:	80 83       	st	Z, r24
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <uart_init>:
 266:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_TxHead>
 26a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxTail>
 26e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_RxHead>
 272:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxTail>
 276:	99 23       	and	r25, r25
 278:	1c f4       	brge	.+6      	; 0x280 <uart_init+0x1a>
 27a:	22 e0       	ldi	r18, 0x02	; 2
 27c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 280:	90 78       	andi	r25, 0x80	; 128
 282:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 286:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 28a:	88 e9       	ldi	r24, 0x98	; 152
 28c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 296:	08 95       	ret

00000298 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 298:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <UART_TxHead>
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2a0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxTail>
 2a4:	29 17       	cp	r18, r25
 2a6:	e1 f3       	breq	.-8      	; 0x2a0 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2a8:	e2 2f       	mov	r30, r18
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e9 5b       	subi	r30, 0xB9	; 185
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2b2:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2b6:	e1 ec       	ldi	r30, 0xC1	; 193
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
    while (*s)
 2c8:	88 81       	ld	r24, Y
 2ca:	88 23       	and	r24, r24
 2cc:	31 f0       	breq	.+12     	; 0x2da <uart_puts+0x18>
 2ce:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 2d0:	0e 94 4c 01 	call	0x298	; 0x298 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 2d4:	89 91       	ld	r24, Y+
 2d6:	81 11       	cpse	r24, r1
 2d8:	fb cf       	rjmp	.-10     	; 0x2d0 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <__itoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	4a 30       	cpi	r20, 0x0A	; 10
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <__itoa_ncheck+0x12>
 2e6:	99 23       	and	r25, r25
 2e8:	22 f4       	brpl	.+8      	; 0x2f2 <__itoa_ncheck+0x12>
 2ea:	bd e2       	ldi	r27, 0x2D	; 45
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__utoa_common>

000002f6 <__utoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27

000002f8 <__utoa_common>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	55 27       	eor	r21, r21
 2fc:	aa 27       	eor	r26, r26
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	a4 17       	cp	r26, r20
 306:	10 f0       	brcs	.+4      	; 0x30c <__utoa_common+0x14>
 308:	a4 1b       	sub	r26, r20
 30a:	83 95       	inc	r24
 30c:	50 51       	subi	r21, 0x10	; 16
 30e:	b9 f7       	brne	.-18     	; 0x2fe <__utoa_common+0x6>
 310:	a0 5d       	subi	r26, 0xD0	; 208
 312:	aa 33       	cpi	r26, 0x3A	; 58
 314:	08 f0       	brcs	.+2      	; 0x318 <__utoa_common+0x20>
 316:	a9 5d       	subi	r26, 0xD9	; 217
 318:	a1 93       	st	Z+, r26
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	79 f7       	brne	.-34     	; 0x2fc <__utoa_common+0x4>
 31e:	b1 11       	cpse	r27, r1
 320:	b1 93       	st	Z+, r27
 322:	11 92       	st	Z+, r1
 324:	cb 01       	movw	r24, r22
 326:	0c 94 95 01 	jmp	0x32a	; 0x32a <strrev>

0000032a <strrev>:
 32a:	dc 01       	movw	r26, r24
 32c:	fc 01       	movw	r30, r24
 32e:	67 2f       	mov	r22, r23
 330:	71 91       	ld	r23, Z+
 332:	77 23       	and	r23, r23
 334:	e1 f7       	brne	.-8      	; 0x32e <strrev+0x4>
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <strrev+0x18>
 33a:	7c 91       	ld	r23, X
 33c:	6d 93       	st	X+, r22
 33e:	70 83       	st	Z, r23
 340:	62 91       	ld	r22, -Z
 342:	ae 17       	cp	r26, r30
 344:	bf 07       	cpc	r27, r31
 346:	c8 f3       	brcs	.-14     	; 0x33a <strrev+0x10>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
