
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800120  00800120  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f39  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f4  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_18>
  4c:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 **********************************************************************/

int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 27 01 	call	0x24e	; 0x24e <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 c6 01 	call	0x38c	; 0x38c <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	28 97       	sbiw	r28, 0x08	; 8
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61
    //uint8_t result = 1;                 // ACK result from the bus
    uint8_t hum_int;
    uint8_t hum_frac;
    uint8_t temp_int;
    uint8_t temp_frac;
    char hum_int_string[2] = "00";
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
    char hum_frac_string[2] = "00";
 114:	9c 83       	std	Y+4, r25	; 0x04
 116:	8b 83       	std	Y+3, r24	; 0x03
    char temp_int_string[2] = "00";
 118:	9e 83       	std	Y+6, r25	; 0x06
 11a:	8d 83       	std	Y+5, r24	; 0x05
    char temp_frac_string[2] = "00";
 11c:	98 87       	std	Y+8, r25	; 0x08
 11e:	8f 83       	std	Y+7, r24	; 0x07
    //char uart_string[2] = "00";         // String for converting numbers by itoa()

    // FSM
    switch (state)
 120:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1965>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	71 f0       	breq	.+28     	; 0x144 <__vector_13+0x6c>
 128:	18 f4       	brcc	.+6      	; 0x130 <__vector_13+0x58>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	39 f0       	breq	.+14     	; 0x13c <__vector_13+0x64>
 12e:	71 c0       	rjmp	.+226    	; 0x212 <__vector_13+0x13a>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	e1 f1       	breq	.+120    	; 0x1ac <__vector_13+0xd4>
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	09 f4       	brne	.+2      	; 0x13a <__vector_13+0x62>
 138:	68 c0       	rjmp	.+208    	; 0x20a <__vector_13+0x132>
 13a:	6b c0       	rjmp	.+214    	; 0x212 <__vector_13+0x13a>
    {
    case STATE_IDLE: //do nothing
        state = STATE_HUMID;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1965>
        break;
 142:	6a c0       	rjmp	.+212    	; 0x218 <__vector_13+0x140>
        
    case STATE_HUMID:
        twi_start((addr<<1) + TWI_READ);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	88 0f       	add	r24, r24
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	0e 94 36 01 	call	0x26c	; 0x26c <twi_start>
        hum_int = twi_read_ack();
 150:	0e 94 54 01 	call	0x2a8	; 0x2a8 <twi_read_ack>
 154:	08 2f       	mov	r16, r24
        hum_frac = twi_read_nack();
 156:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_read_nack>
 15a:	18 2f       	mov	r17, r24
        twi_stop();
 15c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 160:	4a e0       	ldi	r20, 0x0A	; 10
 162:	be 01       	movw	r22, r28
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	80 2f       	mov	r24, r16
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 03 02 	call	0x406	; 0x406 <__itoa_ncheck>
 170:	4a e0       	ldi	r20, 0x0A	; 10
 172:	be 01       	movw	r22, r28
 174:	6d 5f       	subi	r22, 0xFD	; 253
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	81 2f       	mov	r24, r17
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 03 02 	call	0x406	; 0x406 <__itoa_ncheck>
        
        itoa(hum_int, hum_int_string, 10);
        itoa(hum_frac, hum_frac_string, 10);
        uart_puts(hum_int_string);
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts("\r\n");
 188:	8d e1       	ldi	r24, 0x1D	; 29
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts(hum_frac_string);
 190:	ce 01       	movw	r24, r28
 192:	03 96       	adiw	r24, 0x03	; 3
 194:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts("\r\n");  
 198:	8d e1       	ldi	r24, 0x1D	; 29
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        
        addr += 2;
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a4:	8e 5f       	subi	r24, 0xFE	; 254
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 1aa:	36 c0       	rjmp	.+108    	; 0x218 <__vector_13+0x140>
        
    case STATE_TEMP:
        twi_start((addr<<1) + TWI_READ);
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b0:	88 0f       	add	r24, r24
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	0e 94 36 01 	call	0x26c	; 0x26c <twi_start>
        temp_int = twi_read_ack();
 1b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <twi_read_ack>
 1bc:	08 2f       	mov	r16, r24
        temp_frac = twi_read_nack();
 1be:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_read_nack>
 1c2:	18 2f       	mov	r17, r24
        twi_stop();
 1c4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <twi_stop>
 1c8:	4a e0       	ldi	r20, 0x0A	; 10
 1ca:	be 01       	movw	r22, r28
 1cc:	6b 5f       	subi	r22, 0xFB	; 251
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	80 2f       	mov	r24, r16
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 03 02 	call	0x406	; 0x406 <__itoa_ncheck>
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	be 01       	movw	r22, r28
 1dc:	69 5f       	subi	r22, 0xF9	; 249
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	81 2f       	mov	r24, r17
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 03 02 	call	0x406	; 0x406 <__itoa_ncheck>
        
        itoa(temp_int, temp_int_string, 10);
        itoa(temp_frac, temp_frac_string, 10);
        uart_puts(temp_int_string);
 1e8:	ce 01       	movw	r24, r28
 1ea:	05 96       	adiw	r24, 0x05	; 5
 1ec:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts("\r\n");
 1f0:	8d e1       	ldi	r24, 0x1D	; 29
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts(temp_frac_string);
 1f8:	ce 01       	movw	r24, r28
 1fa:	07 96       	adiw	r24, 0x07	; 7
 1fc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
        uart_puts("\r\n");
 200:	8d e1       	ldi	r24, 0x1D	; 29
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_puts>
      
        break;
 208:	07 c0       	rjmp	.+14     	; 0x218 <__vector_13+0x140>

    case STATE_CHECK:
        state = STATE_IDLE;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1965>
        break;
 210:	03 c0       	rjmp	.+6      	; 0x218 <__vector_13+0x140>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1965>
        break;
    }
}
 218:	28 96       	adiw	r28, 0x08	; 8
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <twi_init>:
{
    TWDR = data;
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
}
 24e:	87 b1       	in	r24, 0x07	; 7
 250:	8f 7c       	andi	r24, 0xCF	; 207
 252:	87 b9       	out	0x07, r24	; 7
 254:	88 b1       	in	r24, 0x08	; 8
 256:	80 63       	ori	r24, 0x30	; 48
 258:	88 b9       	out	0x08, r24	; 8
 25a:	e9 eb       	ldi	r30, 0xB9	; 185
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8c 7f       	andi	r24, 0xFC	; 252
 262:	80 83       	st	Z, r24
 264:	88 e9       	ldi	r24, 0x98	; 152
 266:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 26a:	08 95       	ret

0000026c <twi_start>:
 26c:	94 ea       	ldi	r25, 0xA4	; 164
 26e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 272:	ec eb       	ldi	r30, 0xBC	; 188
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	90 81       	ld	r25, Z
 278:	99 23       	and	r25, r25
 27a:	ec f7       	brge	.-6      	; 0x276 <twi_start+0xa>
 27c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 23       	and	r24, r24
 28e:	ec f7       	brge	.-6      	; 0x28a <twi_start+0x1e>
 290:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 294:	98 7f       	andi	r25, 0xF8	; 248
 296:	98 31       	cpi	r25, 0x18	; 24
 298:	29 f0       	breq	.+10     	; 0x2a4 <twi_start+0x38>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 34       	cpi	r25, 0x40	; 64
 29e:	19 f4       	brne	.+6      	; 0x2a6 <twi_start+0x3a>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret

000002a8 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 2a8:	84 ec       	ldi	r24, 0xC4	; 196
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2ae:	ec eb       	ldi	r30, 0xBC	; 188
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	ec f7       	brge	.-6      	; 0x2b2 <twi_read_ack+0xa>
    return (TWDR);
 2b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2bc:	08 95       	ret

000002be <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2be:	84 e8       	ldi	r24, 0x84	; 132
 2c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2c4:	ec eb       	ldi	r30, 0xBC	; 188
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	88 23       	and	r24, r24
 2cc:	ec f7       	brge	.-6      	; 0x2c8 <twi_read_nack+0xa>
    return (TWDR);
 2ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2d2:	08 95       	ret

000002d4 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2d4:	84 e9       	ldi	r24, 0x94	; 148
 2d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2da:	08 95       	ret

000002dc <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2f4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2f8:	8c 71       	andi	r24, 0x1C	; 28
 2fa:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 2fe:	ef 5f       	subi	r30, 0xFF	; 255
 300:	ef 71       	andi	r30, 0x1F	; 31
 302:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 306:	e9 17       	cp	r30, r25
 308:	39 f0       	breq	.+14     	; 0x318 <__vector_18+0x3c>
 30a:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	eb 5d       	subi	r30, 0xDB	; 219
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	20 83       	st	Z, r18
 316:	01 c0       	rjmp	.+2      	; 0x31a <__vector_18+0x3e>
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 31e:	89 2b       	or	r24, r25
 320:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_19>:
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
 34a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 34e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 352:	98 17       	cp	r25, r24
 354:	69 f0       	breq	.+26     	; 0x370 <__vector_19+0x38>
 356:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 35a:	ef 5f       	subi	r30, 0xFF	; 255
 35c:	ef 71       	andi	r30, 0x1F	; 31
 35e:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	eb 5b       	subi	r30, 0xBB	; 187
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	80 81       	ld	r24, Z
 36a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 36e:	05 c0       	rjmp	.+10     	; 0x37a <__vector_19+0x42>
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8f 7d       	andi	r24, 0xDF	; 223
 378:	80 83       	st	Z, r24
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <uart_init>:
 38c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 390:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 394:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 398:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 39c:	99 23       	and	r25, r25
 39e:	1c f4       	brge	.+6      	; 0x3a6 <uart_init+0x1a>
 3a0:	22 e0       	ldi	r18, 0x02	; 2
 3a2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 3a6:	90 78       	andi	r25, 0x80	; 128
 3a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3b0:	88 e9       	ldi	r24, 0x98	; 152
 3b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3bc:	08 95       	ret

000003be <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3be:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 3c2:	2f 5f       	subi	r18, 0xFF	; 255
 3c4:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3c6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 3ca:	29 17       	cp	r18, r25
 3cc:	e1 f3       	breq	.-8      	; 0x3c6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3ce:	e2 2f       	mov	r30, r18
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	eb 5b       	subi	r30, 0xBB	; 187
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3d8:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3dc:	e1 ec       	ldi	r30, 0xC1	; 193
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	80 62       	ori	r24, 0x20	; 32
 3e4:	80 83       	st	Z, r24
 3e6:	08 95       	ret

000003e8 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ec 01       	movw	r28, r24
    while (*s)
 3ee:	88 81       	ld	r24, Y
 3f0:	88 23       	and	r24, r24
 3f2:	31 f0       	breq	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f4:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3f6:	0e 94 df 01 	call	0x3be	; 0x3be <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3fa:	89 91       	ld	r24, Y+
 3fc:	81 11       	cpse	r24, r1
 3fe:	fb cf       	rjmp	.-10     	; 0x3f6 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <__itoa_ncheck>:
 406:	bb 27       	eor	r27, r27
 408:	4a 30       	cpi	r20, 0x0A	; 10
 40a:	31 f4       	brne	.+12     	; 0x418 <__itoa_ncheck+0x12>
 40c:	99 23       	and	r25, r25
 40e:	22 f4       	brpl	.+8      	; 0x418 <__itoa_ncheck+0x12>
 410:	bd e2       	ldi	r27, 0x2D	; 45
 412:	90 95       	com	r25
 414:	81 95       	neg	r24
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__utoa_common>

0000041c <__utoa_ncheck>:
 41c:	bb 27       	eor	r27, r27

0000041e <__utoa_common>:
 41e:	fb 01       	movw	r30, r22
 420:	55 27       	eor	r21, r21
 422:	aa 27       	eor	r26, r26
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	aa 1f       	adc	r26, r26
 42a:	a4 17       	cp	r26, r20
 42c:	10 f0       	brcs	.+4      	; 0x432 <__utoa_common+0x14>
 42e:	a4 1b       	sub	r26, r20
 430:	83 95       	inc	r24
 432:	50 51       	subi	r21, 0x10	; 16
 434:	b9 f7       	brne	.-18     	; 0x424 <__utoa_common+0x6>
 436:	a0 5d       	subi	r26, 0xD0	; 208
 438:	aa 33       	cpi	r26, 0x3A	; 58
 43a:	08 f0       	brcs	.+2      	; 0x43e <__utoa_common+0x20>
 43c:	a9 5d       	subi	r26, 0xD9	; 217
 43e:	a1 93       	st	Z+, r26
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	79 f7       	brne	.-34     	; 0x422 <__utoa_common+0x4>
 444:	b1 11       	cpse	r27, r1
 446:	b1 93       	st	Z+, r27
 448:	11 92       	st	Z+, r1
 44a:	cb 01       	movw	r24, r22
 44c:	0c 94 28 02 	jmp	0x450	; 0x450 <strrev>

00000450 <strrev>:
 450:	dc 01       	movw	r26, r24
 452:	fc 01       	movw	r30, r24
 454:	67 2f       	mov	r22, r23
 456:	71 91       	ld	r23, Z+
 458:	77 23       	and	r23, r23
 45a:	e1 f7       	brne	.-8      	; 0x454 <strrev+0x4>
 45c:	32 97       	sbiw	r30, 0x02	; 2
 45e:	04 c0       	rjmp	.+8      	; 0x468 <strrev+0x18>
 460:	7c 91       	ld	r23, X
 462:	6d 93       	st	X+, r22
 464:	70 83       	st	Z, r23
 466:	62 91       	ld	r22, -Z
 468:	ae 17       	cp	r26, r30
 46a:	bf 07       	cpc	r27, r31
 46c:	c8 f3       	brcs	.-14     	; 0x460 <strrev+0x10>
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
